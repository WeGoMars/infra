services:
  nginx:
    build: ./nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - appnet
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # 직접 마운트
      - ./nginx/certbot-www:/var/www/certbot  # 호스트 디렉토리 사용
      - ./nginx/ssl:/etc/letsencrypt          # 호스트 디렉토리 사용

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot-www:/var/www/certbot  # 같은 호스트 디렉토리
      - ./nginx/ssl:/etc/letsencrypt          # 같은 호스트 디렉토리
    command: certonly --non-interactive --webroot -w /var/www/certbot -d mars.gensapps.io --email studyuann@gmail.com --agree-tos

  frontend:
    build: ./frontend
    working_dir: /app
    restart: always
    ports:
      - "3000:3000"
    networks:
      - appnet

  backend:
    build: ./backend
    working_dir: /app
    restart: always
    ports:
      - "4000:4000"
    networks:
      - appnet
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  # stock-collector-batch:
  #   build:
  #     context: ./stock-collector
  #     dockerfile: dockerfile.batch
  #   container_name: stock-collector-batch
  #   image: mars-stock-collector-batch
  #   restart: "always"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     backend:
  #       condition: service_started
  #   networks:
  #     - appnet
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_USERNAME=${DB_USERNAME}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_DATABASE=${DB_DATABASE}

  stock-collector:
     build:
       context: ./stock-collector
       dockerfile: dockerfile
     container_name: stock-collector
     image: mars-stock-collector
     restart: always
     depends_on:
       db:
         condition: service_healthy
       backend:
         condition: service_started
     networks:
       - appnet
     environment:
       - PYTHONUNBUFFERED=1
       - DB_HOST=${DB_HOST}
       - DB_PORT=${DB_PORT}
       - DB_USERNAME=${DB_USERNAME}
       - DB_PASSWORD=${DB_PASSWORD}
       - DB_DATABASE=${DB_DATABASE}

  #  ai-recommendations:
  #    build:
  #      context: ./ai-recommendations
  #      dockerfile: dockerfile
  #    container_name: ai-recommendations
  #    image: mars-ai-recommendations
  #    restart: always
  #    ports:
  #      - "5000:5000"
  #    depends_on:
  #      db:
  #        condition: service_healthy
  #      backend:
  #        condition: service_started
  #    networks:
  #      - appnet
  #    environment:
  #      - PYTHONUNBUFFERED=1
  #      - DB_HOST=${DB_HOST}
  #      - DB_PORT=${DB_PORT}
  #      - DB_USERNAME=${DB_USERNAME}
  #      - DB_PASSWORD=${DB_PASSWORD}
  #      - DB_DATABASE=${DB_DATABASE}

volumes:
  db-data:
networks:
  appnet:
    driver: bridge